#include "AudioEngine.h"
#include <nlohmann/json.hpp>
#include <juce_audio_devices/juce_audio_devices.h>

using json = nlohmann::json;



bool AudioEngine::loadPlugin(const juce::File& file) {
    if (!file.existsAsFile()) return false;
    // Add logic for loading a plugin
    return true; // Return true if successful
}

bool AudioEngine::savePreset(const juce::File& file) {
    if (!file.hasWriteAccess()) return false;
    // Add logic for saving a preset
    return file.create(); // Example: Save to file
}

bool AudioEngine::loadPreset(const juce::File& file) {
    if (!file.existsAsFile()) return false;
    // Add logic for loading a preset
    return true; // Return true if successful
}

nlohmann::json AudioEngine::getDeviceList() {
    nlohmann::json response;

    // Get the list of available device types
    juce::OwnedArray<juce::AudioIODeviceType> types;
    deviceManager.createAudioDeviceTypes(types);  // Ensure deviceManager is not const

    // Iterate through device types
    for (auto* type : types) {
        type->scanForDevices();  // Refresh device list
        auto inputDevices = type->getDeviceNames(true);   // Input devices
        auto outputDevices = type->getDeviceNames(false); // Output devices

        // Convert JUCE StringArray to std::vector<std::string>
        std::vector<std::string> inputs;
        for (const auto& input : inputDevices) {
            inputs.push_back(input.toStdString());
        }

        std::vector<std::string> outputs;
        for (const auto& output : outputDevices) {
            outputs.push_back(output.toStdString());
        }

        // Assign the vectors to JSON
        response["inputs"] = inputs;
        response["outputs"] = outputs;
    }

    return response;
}

nlohmann::json AudioEngine::setInputDevice(const std::string& deviceName) {
    nlohmann::json response;

    juce::AudioDeviceManager::AudioDeviceSetup setup;
    deviceManager.getAudioDeviceSetup(setup);
    setup.inputDeviceName = deviceName;

    auto error = deviceManager.setAudioDeviceSetup(setup, true);
    if (error.isEmpty()) { // No error indicates success
        response["status"] = "success";
        response["message"] = "Input device set successfully";
    } else {
        response["status"] = "error";
        response["message"] = "Failed to set input device: " + error.toStdString();
    }

    return response;
}

nlohmann::json AudioEngine::setOutputDevice(const std::string& deviceName) {
    nlohmann::json response;

    juce::AudioDeviceManager::AudioDeviceSetup setup;
    deviceManager.getAudioDeviceSetup(setup);
    setup.outputDeviceName = deviceName;

    auto error = deviceManager.setAudioDeviceSetup(setup, true);
    if (error.isEmpty()) { // No error indicates success
        response["status"] = "success";
        response["message"] = "Output device set successfully";
    } else {
        response["status"] = "error";
        response["message"] = "Failed to set output device: " + error.toStdString();
    }

    return response;
}
#pragma once
#ifndef AUDIOENGINE_H
#define AUDIOENGINE_H

#include <juce_core/juce_core.h>
#include <juce_audio_devices/juce_audio_devices.h>
#include <nlohmann/json.hpp>

class AudioEngine
{
public:
    static AudioEngine& getInstance()
    {
        static AudioEngine instance; // Thread-safe in C++11 and later
        return instance;
    }

    nlohmann::json getDeviceList(); // Ensure this matches the definition in the .cpp file
    nlohmann::json setInputDevice(const std::string& deviceName); // Match this
    nlohmann::json setOutputDevice(const std::string& deviceName); // Match this

    // Other public methods
    bool loadPlugin(const juce::File& file);
    bool savePreset(const juce::File& file);
    bool loadPreset(const juce::File& file);

private:
    AudioEngine() = default; // Private constructor
    ~AudioEngine() = default;

    // Delete copy constructor and assignment operator to prevent copies
    AudioEngine(const AudioEngine&) = delete;
    AudioEngine& operator=(const AudioEngine&) = delete;

    juce::AudioDeviceManager deviceManager; // Example member variable
};

#endif // AUDIOENGINE_H
#ifndef CONFIG_H
#define CONFIG_H

// Fix for SMTG_CPP20 redefinition warnings
#ifndef SMTG_CPP20
    #define SMTG_CPP20 (__cplusplus >= 202002L)
#endif

#endif // CONFIG_H
<key>UIApplicationExitsOnSuspend</key>
<true/>
<key>NSPersistentUIEnabled</key>
<false/>
<key>NSMicrophoneUsageDescription</key>
<string>This app requires access to the microphone for audio routing.</string>
#include "Logger.h"

FileLogger::FileLogger(const juce::File& logFile)
{
    if (logFile.existsAsFile() || logFile.create())
        logStream = logFile.createOutputStream();
}

FileLogger::~FileLogger()
{
    logStream.reset(); // Close the file stream
}

void FileLogger::logMessage(const juce::String& message)
{
    if (logStream)
    {
        // Add timestamp to the log message
        auto timestamp = juce::Time::getCurrentTime().toString(true, true);
        logStream->writeText("[" + timestamp + "] " + message + "\n", false, false, nullptr);
        logStream->flush(); // Ensure the log message is immediately written to the file
    }
}#pragma once

#include <juce_core/juce_core.h>

class FileLogger : public juce::Logger
{
public:
    FileLogger(const juce::File& logFile)
        : logFileStream(logFile.createOutputStream()) // Create the FileOutputStream
    {
        jassert(logFileStream != nullptr && logFileStream->openedOk()); // Ensure the stream is valid
    }

    ~FileLogger() override = default;

    void logMessage(const juce::String& message) override
    {
        if (logFileStream != nullptr) // Ensure the stream is valid
        {
            logFileStream->writeText(message + "\n", false, false, "\n"); // Corrected call
        }
    }

private:
    std::unique_ptr<juce::FileOutputStream> logFileStream; // Use a unique_ptr for FileOutputStream

    JUCE_LEAK_DETECTOR(FileLogger) // Add leak detector
};#include "AudioEngine.h"
#include <juce_gui_basics/juce_gui_basics.h>
#include "MainComponent.h"
#include "Logger.h"

class AudioRouterApp : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override { return "AudioRouterApp"; }
    const juce::String getApplicationVersion() override { return "1.0.0"; }

    void initialise(const juce::String&) override
    {
        // Specify the log file path as "juce_log.txt"
        juce::File logFile = juce::File::getSpecialLocation(juce::File::userDocumentsDirectory)
                                 .getChildFile("juce_log.txt");

        // Set the custom logger
        juce::Logger::setCurrentLogger(new juce::FileLogger(logFile, "Application Log Started"));

        // Log an initialization message
        juce::Logger::writeToLog("Application started.");

        mainWindow.reset(new MainWindow("AudioRouterApp", new MainComponent(), *this));
    }

    void shutdown() override
    {
        juce::Logger::writeToLog("Application shutting down.");
        juce::Logger::setCurrentLogger(nullptr); // Reset the logger to avoid leaks
        mainWindow = nullptr;
    }

private:
    class MainWindow : public juce::DocumentWindow
    {
    public:
        MainWindow(const juce::String& name, juce::Component* c, juce::JUCEApplication& app)
            : juce::DocumentWindow(name, juce::Colours::lightgrey, juce::DocumentWindow::allButtons),
              application(app)
        {
            setUsingNativeTitleBar(true);
            setContentOwned(c, true);
            setResizable(true, true);
            centreWithSize(getWidth(), getHeight());
            setVisible(true);
        }

        void closeButtonPressed() override
        {
            application.systemRequestedQuit();
        }

    private:
        juce::JUCEApplication& application;
    };

    std::unique_ptr<juce::DocumentWindow> mainWindow;
};

START_JUCE_APPLICATION(AudioRouterApp)
#include "MainComponent.h"
#include "AudioEngine.h"

MainComponent::MainComponent()
{
    loadPluginButton.onClick = [this]() { onLoadPlugin(); };
    savePresetButton.onClick = [this]() { onSavePreset(); };
    loadPresetButton.onClick = [this]() { onLoadPreset(); };

    addAndMakeVisible(loadPluginButton);
    addAndMakeVisible(savePresetButton);
    addAndMakeVisible(loadPresetButton);

    setSize(600, 400);
}

void MainComponent::resized()
{
    auto area = getLocalBounds().reduced(10);
    auto buttonHeight = 40;

    loadPluginButton.setBounds(area.removeFromTop(buttonHeight).reduced(5));
    savePresetButton.setBounds(area.removeFromTop(buttonHeight).reduced(5));
    loadPresetButton.setBounds(area.removeFromTop(buttonHeight).reduced(5));
}

void MainComponent::onLoadPlugin()
{
    juce::FileChooser chooser("Select a plugin to load...", {}, "*.vst3;*.vst;*.component");
    chooser.launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles,
        [this](const juce::FileChooser& fc)
        {
            auto file = fc.getResult();
            if (file.existsAsFile())
            {
                if (!AudioEngine::getInstance().loadPlugin(file))
                {
                    juce::AlertWindow::showMessageBoxAsync(juce::AlertWindow::WarningIcon,
                        "Error",
                        "Failed to load plugin.");
                }
            }
        });
}

void MainComponent::onSavePreset()
{
    juce::FileChooser chooser("Save Preset...", {}, "*.preset");
    chooser.launchAsync(juce::FileBrowserComponent::saveMode | juce::FileBrowserComponent::canSelectFiles,
        [this](const juce::FileChooser& fc)
        {
            auto file = fc.getResult();
            if (file.existsAsFile())
            {
                if (!AudioEngine::getInstance().savePreset(file))
                {
                    juce::AlertWindow::showMessageBoxAsync(juce::AlertWindow::WarningIcon,
                        "Error",
                        "Failed to save preset.");
                }
            }
        });
}

void MainComponent::onLoadPreset()
{
    juce::FileChooser chooser("Load Preset...", {}, "*.preset");
    chooser.launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles,
        [this](const juce::FileChooser& fc)
        {
            auto file = fc.getResult();
            if (file.existsAsFile())
            {
                if (!AudioEngine::getInstance().loadPreset(file))
                {
                    juce::AlertWindow::showMessageBoxAsync(juce::AlertWindow::WarningIcon,
                        "Error",
                        "Failed to load preset.");
                }
            }
        });
}
#pragma once

#include <JuceHeader.h>
#include "AudioEngine.h"

class MainComponent : public juce::Component
{
public:
    // Constructor and Destructor
    MainComponent();
    ~MainComponent() override = default;

    // Component Overrides
    void resized() override;

private:
    // Button click handlers
    void onLoadPlugin();
    void onSavePreset();
    void onLoadPreset();

    // UI Components
    juce::TextButton loadPluginButton{"Load Plugin"};
    juce::TextButton savePresetButton{"Save Preset"};
    juce::TextButton loadPresetButton{"Load Preset"};

    // Prevent copy and move
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MainComponent)
};
#include "ZeroMQServer.h"
#include <iostream>

ZeroMQServer::ZeroMQServer() : socket(context, ZMQ_REP)
{
    socket.bind("tcp://*:5555");
}

ZeroMQServer::~ZeroMQServer()
{
    socket.close();
    context.close();
}

void ZeroMQServer::listen()
{
    while (true)
    {
        zmq::message_t request;
        auto result = socket.recv(request, zmq::recv_flags::none);
        if (!result)
        {
            std::cerr << "Failed to receive message from socket." << std::endl;
            return; // Or handle the error appropriately
        }

        try
        {
            std::string msg(static_cast<char*>(request.data()), request.size());
            nlohmann::json command = nlohmann::json::parse(msg);

            // Use the Singleton instance of AudioEngine
            nlohmann::json response = processCommand(command, AudioEngine::getInstance());

            zmq::message_t reply(response.dump());
            socket.send(reply, zmq::send_flags::none);
        }
        catch (const std::exception& e)
        {
            nlohmann::json errorResponse = {
                {"status", "error"},
                {"message", e.what()}
            };

            zmq::message_t reply(errorResponse.dump());
            socket.send(reply, zmq::send_flags::none);
        }
    }
}

nlohmann::json ZeroMQServer::processCommand(const nlohmann::json& command, AudioEngine& audioEngine)
{
    nlohmann::json response;

    if (command.contains("action"))
    {
        std::string action = command["action"];
        if (action == "get_devices")
        {
            return audioEngine.getDeviceList();
        }
        else if (action == "set_input" && command.contains("device_name"))
        {
            return audioEngine.setInputDevice(command["device_name"]);
        }
        else if (action == "set_output" && command.contains("device_name"))
        {
            return audioEngine.setOutputDevice(command["device_name"]);
        }
    }

    response["status"] = "error";
    response["message"] = "Unknown or invalid command";
    return response;
}
#ifndef ZEROMQ_SERVER_H
#define ZEROMQ_SERVER_H

#include <nlohmann/json.hpp>
#include <zmq.hpp>
#include <string>
#include "AudioEngine.h"

class ZeroMQServer
{
public:
    ZeroMQServer();
    ~ZeroMQServer();

    void listen();

private:
    nlohmann::json processCommand(const nlohmann::json& command, AudioEngine& audioEngine);

    zmq::context_t context{1};
    zmq::socket_t socket;
};


#endif // ZEROMQ_SERVER_H
